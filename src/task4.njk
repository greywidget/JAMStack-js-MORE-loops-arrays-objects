---
subtitle: Select items from the cart based on a Price Range.
layout: base.njk
jsfile: task4.js
eleventyNavigation:
  key: Task4
  order: 4
---
    
<div class="col-10 text-start">
    <h2>{{ subtitle }}</h2>
    <p>Create a new function to return items from the cart whose price 
      falls within a specific range.</p>
    <ul>
      <li>Arguments for the function should include <em>cart</em>, 
        <em>low price</em> and <em>high price</em>.</li>
      <li>A second version of the function should include an additional
        <em>quantity</em> parameter. If this parameter is passed as 
        <code>true</code> then item selection should be based upon 
        <em>price * quantity</em> instead of just <em>price</em>.</li>
    </ul>
    <p>For brevity, the javascript for the Shopping Cart itself is not shown 
      below. Please see the <a href="{{ '/' | url }}">home page</a> 
      for details of the Shopping Cart.</p>
    <h2 class="pt-3">Javascript</h2>
    <div class="bg-white">
    <pre><code>// Return items from the cart if the price falls within a low -> high Range.
// The first function bases selection simply on the price.
// The second function allows selection to be based on price * quantity if
//   the quantity boolean is passed as true.
// N.B that this uses the shoppingCart object from shoppingCart.js

function getItems() {
    // Example One - getItemsInPriceRange() (doesn't use quantity)
    var lowPrice = 0.4;
    var highPrice = 3.5;
    var outStr = `&lt;h3&gt;Low: ${lowPrice}, High: ${highPrice}&lt;/h3&gt;`
               + "&lt;code&gt;";
    var items = getItemsInPriceRange(shoppingCart, lowPrice, highPrice);

    for (const item of items) {
        outStr += JSON.stringify(item) + "&lt;br&gt;";
    }
    outStr += "&lt;/code&gt;";
    document.getElementById('js-output1').innerHTML = outStr;
    
    // Example Two - getItemsInItemRange() with quantity set to false
    outStr = `&lt;h3&gt;Low: ${lowPrice}, High: ${highPrice}, Quantity: false&lt;/h3&gt;`
               + "&lt;code&gt;";
    var items = getItemsInItemRange(shoppingCart, lowPrice, highPrice, false);

    for (const item of items) {
        outStr += JSON.stringify(item) + "&lt;br&gt;";
    }
    outStr += "&lt;/code&gt;";
    document.getElementById('js-output2').innerHTML = outStr;
    
    // Example Three - getItemsInItemRange() with quantity set to true
    outStr = `&lt;h3&gt;Low: ${lowPrice}, High: ${highPrice}, Quantity: true&lt;/h3&gt;`
               + "&lt;code&gt;";
    var items = getItemsInItemRange(shoppingCart, lowPrice, highPrice, true);

    for (const item of items) {
        outStr += JSON.stringify(item) + "&lt;br&gt;";
    }
    outStr += "&lt;/code&gt;";
    document.getElementById('js-output3').innerHTML = outStr;

}

function getItemsInPriceRange(cart, lowPrice, highPrice) {
    var items = [];

    for (const item of cart) {
        if (item.price &gt;= lowPrice && item.price &lt;= highPrice) {
            items.push(item);
        }
    }
    return items;
}

function getItemsInItemRange(cart, lowPrice, highPrice, quantity) {
    var items = [];

    for (const item of cart) {
        if (quantity === true) 
            itemPrice = item.quantity * item.price;
        else
            itemPrice = item.price;

        if (itemPrice &gt;= lowPrice && itemPrice &lt;= highPrice) {
            items.push(item);
        }
    }
    return items;
}</code></pre>
</div>
    <button type="button" class="btn btn-secondary text-warning" 
      onclick="getItems()">Run Javascript</button>
    <h2 class="pt-3">Output</h2>
    <p id="js-output1">
    <p id="js-output2">
    <p id="js-output3">
    </p>
</div>